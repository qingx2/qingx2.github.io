<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PHP on Maverick</title>
    <link>https://qingx2.github.io/tags/php/</link>
    <description>Recent content in PHP on Maverick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Nov 2018 15:55:32 +0800</lastBuildDate><atom:link href="https://qingx2.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux部署PHP项目环境</title>
      <link>https://qingx2.github.io/post/linux%E9%83%A8%E7%BD%B2php%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 06 Nov 2018 15:55:32 +0800</pubDate>
      
      <guid>https://qingx2.github.io/post/linux%E9%83%A8%E7%BD%B2php%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;全新 Linux 服务器部署记录&lt;/li&gt;
&lt;li&gt;使用 Yum、Systemd 进行各依赖的管理&lt;/li&gt;
&lt;li&gt;主要记录：安装步骤、依赖配置、可能遇到的问题&lt;/li&gt;
&lt;li&gt;涉及软件：PHP、MySQL、Nginx、MongoDB、Redis、Mosquitto、Git&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>PHP 设计模式 适配器模式</title>
      <link>https://qingx2.github.io/post/php-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 16 Oct 2018 16:13:24 +0800</pubDate>
      
      <guid>https://qingx2.github.io/post/php-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;转载 &lt;a href=&#34;http://www.php.cn/php-weizijiaocheng-381339.html&#34;&gt;原创地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	适配器模式将现有接口转化为客户类所期望的接口，实现了对现有类的复用，它是一种使用频率非常高的设计模式。&lt;/p&gt;
&lt;p&gt;​	适配器把对某些相似的类的操作转化为一个统一的 “接口”(这里是比喻的说话)，或者比喻为一个 “界面”，统一或屏蔽了那些类的细节。&lt;strong&gt;适配器模式&lt;/strong&gt;还构造了一种 “机制”，使 “适配” 的类可以很容易的增减，而不用修改与&lt;strong&gt;适配器&lt;/strong&gt;交互的代码，符合 “减少代码间耦合” 的设计原则。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 设计模式 工厂模式</title>
      <link>https://qingx2.github.io/post/php-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 16 Oct 2018 16:11:08 +0800</pubDate>
      
      <guid>https://qingx2.github.io/post/php-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;那么何为工厂模式&#34;&gt;那么何为工厂模式？&lt;/h3&gt;
&lt;p&gt;　　定义一个创建对象的接口，但是让子类去实例化具体类。工厂方法模式让类的实例化延迟到子类中。&lt;/p&gt;
&lt;p&gt;　&lt;em&gt;工厂模式有一个关键的构造，根据一般原则命名为 Factory 的静态方法，然而这只是一种原则，虽然工厂方法可以任意命名这个静态还可以接受任意数据的参数，必须返回一个对象。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 设计模式 单例模式</title>
      <link>https://qingx2.github.io/post/php-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 16 Oct 2018 16:11:00 +0800</pubDate>
      
      <guid>https://qingx2.github.io/post/php-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;什么是单例模式&#34;&gt;什么是单例模式？&lt;/h3&gt;
&lt;p&gt;​	根据这个名称，我们很容易了解到，单例模式指的是在整个应用中&lt;strong&gt;只有一个对象实例&lt;/strong&gt;的设计模式。&lt;/p&gt;
&lt;h3 id=&#34;为什么要用单例模式&#34;&gt;为什么要用单例模式？&lt;/h3&gt;
&lt;p&gt;​		PHP 常常和数据库打交道，如果在应用中如果频繁建立连接对象，进行 &lt;code&gt;new&lt;/code&gt; 操作的话，会消耗大料的系统内存资源，这并不是我们希望看到的。再则，在团队合作项目中，单例模式可以有效避免不同程序员 &lt;code&gt;new&lt;/code&gt; 自己的对象，造成人为的系统消耗。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 设计模式 观察者模式</title>
      <link>https://qingx2.github.io/post/php-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 16 Oct 2018 16:10:38 +0800</pubDate>
      
      <guid>https://qingx2.github.io/post/php-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;​	    这是我写的《php 模式设计》的第五篇。前面的四篇在不断学习不断加深认识，到了今天再看观察者模式，觉得非常容易理解。这也许就是我们积少成多的结果吧。希望还是能够不断进步。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;　开篇还是从名字说起，“观察者模式” 的观察者三个字信息量很大。玩过很多网络游戏的童鞋们应该知道，即便是斗地主，除了玩家，还有一个角色叫 “观察者 &amp;quot;。在我们今天他谈论的模式设计中，观察者也是如此。首先，要有一个 “主题”。只有有了一个主题，观察者才能搬着小板凳儿聚在一堆。其次，观察者还必须要有自己的操作。否则你聚在一堆儿没事做也没什么意义。
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>PHP 扩展安装失败</title>
      <link>https://qingx2.github.io/post/php%E6%89%A9%E5%B1%95%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Sun, 26 Aug 2018 19:19:42 +0800</pubDate>
      
      <guid>https://qingx2.github.io/post/php%E6%89%A9%E5%B1%95%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/</guid>
      <description>1. Connection to ssl://pecl.php.net:443 fail 安装 pecl install redis, pecl install mongodb, pecl search redis, pecl install swoole, 提示以下错误
No releases available for package &amp;quot;pecl.php.net/memcache&amp;quot;
导致出现这个错误的原因，可能是网络问题（需要翻墙）或者是 OpenSSL 的问题，这里提供一个简单的办法：
从 pecl.php.net 搜索下载所需要的扩展包（比如下载一个 Redis 的扩展， 会得到 redis-4.1.1.tgz 这个压缩包） 执行 pecl install redis-4.1.1.tgz 2. configure: error: Cannot find OpenSSL&amp;rsquo;s &amp;lt;evp.h&amp;gt; 错误信息
configure: error: Cannot find OpenSSL&amp;#39;s &amp;lt;evp.h&amp;gt; ERROR: `/private/tmp/pear/temp/event/configure --with-php-config=/usr/local/opt/php@7.0/bin/php-config --enable-event-debug=no --enable-event-sockets=yes --with-event-libevent-dir=/usr --with-event-pthreads=no --with-event-extra --with-event-openssl --with-event-ns=no --with-openssl-dir=no&amp;#39; failed 解决办法
$ brew install openssl $ ln -s /usr/local/Cellar/openssl/1.</description>
    </item>
    
    <item>
      <title>Laravel语法提示PHPStorm </title>
      <link>https://qingx2.github.io/post/laravel%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BAphpstorm/</link>
      <pubDate>Tue, 30 May 2017 16:21:50 +0000</pubDate>
      
      <guid>https://qingx2.github.io/post/laravel%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BAphpstorm/</guid>
      <description>添加 composer 依赖包 在 composer.json 文件里添加依赖包信息
&amp;ldquo;barryvdh/laravel-ide-helper&amp;rdquo;:&amp;ldquo;dev-master&amp;rdquo;
&amp;ldquo;php artisan ide-helper:generate&amp;rdquo;
&amp;#34;require&amp;#34;: { // other composer ... &amp;#34;barryvdh/laravel-ide-helper&amp;#34;:&amp;#34;dev-master&amp;#34; } &amp;#34;scripts&amp;#34;: { &amp;#34;post-update-cmd&amp;#34;: [ // other cmd.. // 以后执行 composer update 的时候会自动执行此扩展包的任务 &amp;#34;php artisan ide-helper:generate&amp;#34; ] }, 添加service provider 服务 在你的Laravel项目 config/app.php 于 providers 添加如下代码注册为服务提供者，使其在每个环境下都加载进来：
Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class, 保存退出，执行 composer update 下载依赖包并会自动执行扩展包任务</description>
    </item>
    
  </channel>
</rss>
